import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { ModelStatistics } from "@/types/trading";
import { TrendingUp, Target, BarChart3, Activity } from "lucide-react";

interface ModelPerformanceChartProps {
  stats: ModelStatistics;
}

const ModelPerformanceChart = ({ stats }: ModelPerformanceChartProps) => {
  const getPerformanceLevel = (accuracy: number) => {
    if (accuracy >= 80) return { label: '–û—Ç–ª–∏—á–Ω–∞—è', color: 'bg-green-600', textColor: 'text-green-400' };
    if (accuracy >= 70) return { label: '–•–æ—Ä–æ—à–∞—è', color: 'bg-blue-600', textColor: 'text-blue-400' };
    if (accuracy >= 60) return { label: '–°—Ä–µ–¥–Ω—è—è', color: 'bg-yellow-600', textColor: 'text-yellow-400' };
    return { label: '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è', color: 'bg-red-600', textColor: 'text-red-400' };
  };

  const overallPerformance = getPerformanceLevel(stats.overallAccuracy);
  const callPerformance = getPerformanceLevel(stats.callAccuracy);
  const putPerformance = getPerformanceLevel(stats.putAccuracy);

  return (
    <Card className="p-6 bg-slate-800/50 border-slate-700">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <Activity className="h-6 w-6 text-purple-400" />
          <h3 className="text-xl font-semibold text-white">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏</h3>
        </div>
        <Badge className={overallPerformance.color}>
          {overallPerformance.label}
        </Badge>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="text-center p-4 bg-slate-700/50 rounded-lg">
          <div className={`text-4xl font-bold mb-2 ${overallPerformance.textColor}`}>
            {stats.overallAccuracy.toFixed(1)}%
          </div>
          <Progress value={stats.overallAccuracy} className="mb-3 h-3" />
          <div className="text-white font-medium">–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</div>
          <div className="text-slate-400 text-sm">
            {stats.accurateCount} –∏–∑ {stats.totalPredictions} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
          </div>
        </div>

        <div className="text-center p-4 bg-slate-700/50 rounded-lg">
          <div className={`text-4xl font-bold mb-2 ${callPerformance.textColor}`}>
            {stats.callAccuracy.toFixed(1)}%
          </div>
          <Progress value={stats.callAccuracy} className="mb-3 h-3" />
          <div className="text-white font-medium flex items-center justify-center space-x-1">
            <TrendingUp className="h-4 w-4" />
            <span>CALL —Ç–æ—á–Ω–æ—Å—Ç—å</span>
          </div>
          <Badge className="mt-2 bg-green-600/20 text-green-300">
            –ë—ã—á—å–∏ —Å–∏–≥–Ω–∞–ª—ã
          </Badge>
        </div>

        <div className="text-center p-4 bg-slate-700/50 rounded-lg">
          <div className={`text-4xl font-bold mb-2 ${putPerformance.textColor}`}>
            {stats.putAccuracy.toFixed(1)}%
          </div>
          <Progress value={stats.putAccuracy} className="mb-3 h-3" />
          <div className="text-white font-medium flex items-center justify-center space-x-1">
            <Target className="h-4 w-4" />
            <span>PUT —Ç–æ—á–Ω–æ—Å—Ç—å</span>
          </div>
          <Badge className="mt-2 bg-red-600/20 text-red-300">
            –ú–µ–¥–≤–µ–∂—å–∏ —Å–∏–≥–Ω–∞–ª—ã
          </Badge>
        </div>
      </div>

      {/* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ */}
      <div>
        <div className="flex items-center space-x-2 mb-4">
          <BarChart3 className="h-5 w-5 text-blue-400" />
          <h4 className="text-lg font-medium text-white">–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤</h4>
          <Badge variant="outline" className="text-xs">
            –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ
          </Badge>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {Object.entries(stats.currentWeights).map(([factor, weight]) => {
            const percentage = (weight as number) * 100;
            const getFactorIcon = (factorName: string) => {
              switch (factorName) {
                case 'technical': return 'üìä';
                case 'volume': return 'üìà';
                case 'momentum': return '‚ö°';
                case 'volatility': return 'üåä';
                case 'pattern': return 'üïØÔ∏è';
                case 'trend': return 'üìâ';
                default: return 'üìã';
              }
            };

            const getFactorName = (factorName: string) => {
              switch (factorName) {
                case 'technical': return '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π';
                case 'volume': return '–û–±—ä–µ–º';
                case 'momentum': return '–ú–æ–º–µ–Ω—Ç—É–º';
                case 'volatility': return '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å';
                case 'pattern': return '–ü–∞—Ç—Ç–µ—Ä–Ω—ã';
                case 'trend': return '–¢—Ä–µ–Ω–¥';
                default: return factorName;
              }
            };

            return (
              <div key={factor} className="bg-slate-700/30 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{getFactorIcon(factor)}</span>
                    <span className="text-sm text-slate-300 font-medium">
                      {getFactorName(factor)}
                    </span>
                  </div>
                  <Badge variant="outline" className="text-xs">
                    {percentage.toFixed(1)}%
                  </Badge>
                </div>
                <Progress value={percentage} className="h-2 mb-2" />
                <div className="text-xs text-slate-400">
                  {percentage > 25 ? '–í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ' : percentage > 15 ? '–°—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ' : '–ù–∏–∑–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ'}
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é */}
      <div className="mt-6 p-4 bg-blue-600/10 border border-blue-600/30 rounded-lg">
        <h5 className="text-white font-medium mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</h5>
        <ul className="text-blue-200 text-sm space-y-1">
          {stats.overallAccuracy < 70 && (
            <li>‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏</li>
          )}
          {Math.abs(stats.callAccuracy - stats.putAccuracy) > 20 && (
            <li>‚Ä¢ –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É CALL –∏ PUT —Å–∏–≥–Ω–∞–ª–∞–º–∏</li>
          )}
          {stats.totalPredictions < 50 && (
            <li>‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
          )}
          <li>‚Ä¢ –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–µ—Å–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        </ul>
      </div>
    </Card>
  );
};

export default ModelPerformanceChart;