
import { useMemo, useCallback } from 'react';
import { useCandleOperations } from './candle/useCandleOperations';
import { useSessionManager } from './session/useSessionManager';

export const useApplicationState = () => {
  const {
    sessions,
    currentSession,
    candles,
    isLoading,
    sessionStats,
    nextCandleIndex,
    createSession,
    loadSession,
    deleteSession,
    resetSessionState,
    updateCandles,
    setCurrentSession
  } = useSessionManager();

  const { 
    saveCandle, 
    deleteCandle, 
    updateCandle,
    syncCandleData 
  } = useCandleOperations(
    currentSession,
    updateCandles,
    setCurrentSession
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
  const lastCandle = useMemo(() => {
    if (candles.length === 0) return null;
    return candles.reduce((latest, current) => 
      current.candle_index > latest.candle_index ? current : latest
    );
  }, [candles]);

  const deleteLastCandle = useCallback(async () => {
    if (!lastCandle) return;
    await deleteCandle(lastCandle.candle_index);
  }, [lastCandle, deleteCandle]);

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const checkDataSync = useCallback(() => {
    if (!currentSession) return null;
    
    const actualCandleCount = candles.length;
    const expectedMaxIndex = actualCandleCount > 0 
      ? Math.max(...candles.map(c => c.candle_index))
      : 0;
    
    const isSync = currentSession.current_candle_index === expectedMaxIndex;
    
    return {
      isSync,
      actualCandleCount,
      sessionIndex: currentSession.current_candle_index,
      expectedMaxIndex,
      diff: currentSession.current_candle_index - expectedMaxIndex
    };
  }, [currentSession, candles]);

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º
  const autoSync = useCallback(async () => {
    const syncCheck = checkDataSync();
    if (!syncCheck) return false;
    
    if (!syncCheck.isSync) {
      console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      console.log(`–°–≤–µ—á–µ–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: ${syncCheck.actualCandleCount}`);
      console.log(`–ò–Ω–¥–µ–∫—Å –≤ —Å–µ—Å—Å–∏–∏: ${syncCheck.sessionIndex}`);
      console.log(`–û–∂–∏–¥–∞–µ–º—ã–π –∏–Ω–¥–µ–∫—Å: ${syncCheck.expectedMaxIndex}`);
      
      await syncCandleData();
      return true;
    }
    
    return false;
  }, [checkDataSync, syncCandleData]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π
    sessions,
    currentSession,
    candles,
    isLoading,
    sessionStats,
    nextCandleIndex,
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–µ—Å—Å–∏—è–º–∏
    loadSession,
    createSession,
    deleteSession,
    resetSessionState,
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–≤–µ—á–∞–º–∏
    saveCandle,
    deleteLastCandle,
    updateCandle,
    
    // –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    syncCandleData,
    checkDataSync,
    autoSync
  };
};
