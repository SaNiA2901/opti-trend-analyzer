
import { useMemo, useCallback, useEffect } from 'react';
import { useCandleOperations } from './candle/useCandleOperations';
import { useSessionManager } from './session/useSessionManager';

export const useApplicationState = () => {
  const {
    sessions,
    currentSession,
    candles,
    isLoading,
    sessionStats,
    nextCandleIndex,
    createSession,
    loadSession,
    deleteSession,
    resetSessionState,
    updateCandles,
    setCurrentSession,
    syncStateWithDB,
    validateDataIntegrity
  } = useSessionManager();

  const { 
    saveCandle, 
    deleteCandle, 
    updateCandle,
    syncCandleData,
    validateDataConsistency
  } = useCandleOperations(
    currentSession,
    updateCandles,
    setCurrentSession
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
  const lastCandle = useMemo(() => {
    if (candles.length === 0) return null;
    return candles.reduce((latest, current) => 
      current.candle_index > latest.candle_index ? current : latest
    );
  }, [candles]);

  const deleteLastCandle = useCallback(async () => {
    if (!lastCandle) return;
    await deleteCandle(lastCandle.candle_index);
  }, [lastCandle, deleteCandle]);

  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const checkDataSync = useCallback(() => {
    if (!currentSession) {
      return null;
    }

    const actualCandleCount = candles.length;
    const sessionIndex = currentSession.current_candle_index;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ä–µ–¥–∏ —Å–≤–µ—á–µ–π
    const maxCandleIndex = actualCandleCount > 0 
      ? Math.max(...candles.map(c => c.candle_index))
      : 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
    const candleIndices = candles.map(c => c.candle_index).sort((a, b) => a - b);
    const hasGaps = candleIndices.some((index, i) => 
      i > 0 && index !== candleIndices[i - 1] + 1
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–±–ª–µ–º
    const problems = {
      countMismatch: actualCandleCount !== sessionIndex,
      indexMismatch: sessionIndex !== maxCandleIndex,
      hasGaps,
      emptyCandles: actualCandleCount === 0 && sessionIndex > 0,
      negativeDiscrepancy: sessionIndex < maxCandleIndex
    };

    const hasAnyProblem = Object.values(problems).some(Boolean);

    return {
      isSync: !hasAnyProblem,
      actualCandleCount,
      sessionIndex,
      maxCandleIndex,
      problems,
      discrepancy: sessionIndex - actualCandleCount,
      indexDiscrepancy: sessionIndex - maxCandleIndex,
      diagnostics: {
        expectedNextIndex: maxCandleIndex + 1,
        candleIndices: candleIndices.slice(0, 5), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        lastUpdateTime: currentSession.updated_at
      }
    };
  }, [currentSession, candles]);

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
  const diagnoseProblem = useCallback(async () => {
    const syncCheck = checkDataSync();
    if (!syncCheck || syncCheck.isSync) {
      return { hasProblems: false, report: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã' };
    }

    const report = [];
    
    if (syncCheck.problems.emptyCandles) {
      report.push(`üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç —Å–≤–µ—á–µ–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (0), –Ω–æ –∏–Ω–¥–µ–∫—Å —Å–µ—Å—Å–∏–∏ ${syncCheck.sessionIndex}`);
    }
    
    if (syncCheck.problems.countMismatch) {
      report.push(`‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (${syncCheck.actualCandleCount}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º —Å–µ—Å—Å–∏–∏ (${syncCheck.sessionIndex})`);
    }
    
    if (syncCheck.problems.indexMismatch) {
      report.push(`‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —Å–µ—Å—Å–∏–∏ (${syncCheck.sessionIndex}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º —Å–≤–µ—á–∏ (${syncCheck.maxCandleIndex})`);
    }
    
    if (syncCheck.problems.hasGaps) {
      report.push(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö —Å–≤–µ—á–µ–π`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const dbConsistency = await validateDataConsistency();
    if (dbConsistency) {
      report.push(`üìä –í –ë–î: ${dbConsistency.dbCandleCount} —Å–≤–µ—á–µ–π, –∏–Ω–¥–µ–∫—Å —Å–µ—Å—Å–∏–∏ ${dbConsistency.dbSessionIndex}`);
    }

    return {
      hasProblems: true,
      syncCheck,
      dbConsistency,
      report: report.join('\n'),
      recommendedAction: determineRecommendedAction(syncCheck)
    };
  }, [checkDataSync, validateDataConsistency]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º
  const determineRecommendedAction = (syncCheck: any) => {
    if (syncCheck.problems.emptyCandles) {
      return 'FORCE_RELOAD'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î
    }
    if (syncCheck.problems.negativeDiscrepancy) {
      return 'SYNC_DB'; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–î
    }
    if (syncCheck.problems.hasGaps) {
      return 'VALIDATE_INDICES'; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    }
    return 'SOFT_SYNC'; // –ú—è–≥–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  };

  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
  const autoSync = useCallback(async () => {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    const diagnosis = await diagnoseProblem();
    
    if (!diagnosis.hasProblems) {
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return { synced: false, reason: 'No problems detected' };
    }

    console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
    console.log(diagnosis.report);

    try {
      let result;
      
      switch (diagnosis.recommendedAction) {
        case 'FORCE_RELOAD':
          console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É...');
          result = await syncCandleData();
          break;
          
        case 'SYNC_DB':
          console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ë–î...');
          result = await syncStateWithDB();
          break;
          
        default:
          console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
          result = await syncCandleData();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const postSyncCheck = checkDataSync();
      const success = postSyncCheck?.isSync || false;

      console.log(success ? '‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' : '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');

      return {
        synced: true,
        success,
        beforeSync: diagnosis.syncCheck,
        afterSync: postSyncCheck,
        action: diagnosis.recommendedAction,
        result
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return {
        synced: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        diagnosis
      };
    }
  }, [diagnoseProblem, syncCandleData, syncStateWithDB, checkDataSync]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (currentSession) {
      const checkTimer = setTimeout(() => {
        const syncCheck = checkDataSync();
        if (syncCheck && !syncCheck.isSync) {
          console.log('üëÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Å—Å–∏–∏');
          autoSync();
        }
      }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

      return () => clearTimeout(checkTimer);
    }
  }, [currentSession?.id, checkDataSync, autoSync]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π
    sessions,
    currentSession,
    candles,
    isLoading,
    sessionStats,
    nextCandleIndex,
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–µ—Å—Å–∏—è–º–∏
    loadSession,
    createSession,
    deleteSession,
    resetSessionState,
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–≤–µ—á–∞–º–∏
    saveCandle,
    deleteLastCandle,
    updateCandle,
    
    // –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    syncCandleData,
    checkDataSync,
    autoSync,
    diagnoseProblem,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    lastCandle
  };
};
