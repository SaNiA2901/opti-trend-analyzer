
import { useCallback } from 'react';
import { candleService } from '@/services/candleService';
import { sessionService } from '@/services/sessionService';
import { calculateCandleDateTime } from '@/utils/dateTimeUtils';
import { validateCandleData } from '@/utils/candleValidation';
import { useErrorHandler } from '@/hooks/useErrorHandler';
import { TradingSession, CandleData } from '@/types/session';

export const useCandleOperations = (
  currentSession: TradingSession | null,
  updateCandles: (updater: (prev: CandleData[]) => CandleData[]) => void,
  setCurrentSession: (session: TradingSession | null) => void
) => {
  const { addError } = useErrorHandler();

  const saveCandle = useCallback(async (candleData: Omit<CandleData, 'id' | 'candle_datetime'>) => {
    if (!currentSession) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }

    const validation = validateCandleData(candleData);
    if (!validation.isValid) {
      throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.errors.join(', ')}`);
    }

    try {
      const candleDateTime = calculateCandleDateTime(
        currentSession.start_date,
        currentSession.start_time,
        currentSession.timeframe,
        candleData.candle_index
      );

      const fullCandleData = {
        ...candleData,
        candle_datetime: candleDateTime
      };

      console.log('Saving candle data:', fullCandleData);
      const savedCandle = await candleService.saveCandle(fullCandleData);

      if (!savedCandle) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ—á—É');
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—á–µ–π
      updateCandles(prev => {
        const filtered = prev.filter(c => c.candle_index !== candleData.candle_index);
        const newCandles = [...filtered, savedCandle].sort((a, b) => a.candle_index - b.candle_index);
        
        console.log(`üïØÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–≤–µ—á–µ–π: ${prev.length} -> ${newCandles.length}`);
        return newCandles;
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const newCandleIndex = Math.max(
        currentSession.current_candle_index, 
        candleData.candle_index
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –ë–î
      await sessionService.updateSessionCandleIndex(currentSession.id, newCandleIndex);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      try {
        const syncResult = await sessionService.syncSessionData(currentSession.id);
        console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –∏–Ω–¥–µ–∫—Å=${syncResult.session.current_candle_index}, —Å–≤–µ—á–µ–π=${syncResult.actualCandleCount}`);
        
        setCurrentSession({
          ...syncResult.session,
          updated_at: new Date().toISOString()
        });
      } catch (syncError) {
        console.warn('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏:', syncError);
        // Fallback: –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ
        setCurrentSession({
          ...currentSession,
          current_candle_index: newCandleIndex,
          updated_at: new Date().toISOString()
        });
      }

      return savedCandle;
    } catch (error) {
      console.error('Error in saveCandle:', error);
      addError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏', error instanceof Error ? error.message : 'Unknown error');
      throw error;
    }
  }, [currentSession, updateCandles, setCurrentSession, addError]);

  const deleteCandle = useCallback(async (candleIndex: number) => {
    if (!currentSession) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
    }
    
    try {
      await candleService.deleteCandle(currentSession.id, candleIndex);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î
      updateCandles(prev => {
        const filtered = prev.filter(c => c.candle_index !== candleIndex);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–≤–µ—á–∞ ${candleIndex}, –æ—Å—Ç–∞–ª–æ—Å—å: ${filtered.length}`);
        return filtered;
      });

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      try {
        const syncResult = await sessionService.syncSessionData(currentSession.id);
        console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: –∏–Ω–¥–µ–∫—Å=${syncResult.session.current_candle_index}, —Å–≤–µ—á–µ–π=${syncResult.actualCandleCount}`);
        
        setCurrentSession(syncResult.session);
      } catch (syncError) {
        console.warn('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–µ—á–∏:', syncError);
      }
      
      console.log('Candle deleted successfully:', candleIndex);
    } catch (error) {
      console.error('Error deleting candle:', error);
      addError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–µ—á–∏', error instanceof Error ? error.message : 'Unknown error');
      throw error;
    }
  }, [currentSession, updateCandles, setCurrentSession, addError]);

  const updateCandle = useCallback(async (candleIndex: number, updatedData: Partial<CandleData>) => {
    if (!currentSession) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
    }
    
    try {
      const updatedCandle = await candleService.updateCandle(currentSession.id, candleIndex, updatedData);

      if (updatedCandle) {
        updateCandles(prev => {
          const newCandles = prev.map(c => 
            c.candle_index === candleIndex ? updatedCandle : c
          );
          console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–µ—á–∞ ${candleIndex}`);
          return newCandles;
        });
        
        console.log('Candle updated successfully:', candleIndex);
        return updatedCandle;
      }
    } catch (error) {
      console.error('Error updating candle:', error);
      addError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–∏', error instanceof Error ? error.message : 'Unknown error');
      throw error;
    }
  }, [currentSession, updateCandles, addError]);

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const syncCandleData = useCallback(async () => {
    if (!currentSession) {
      console.warn('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return;
    }

    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
      const result = await sessionService.loadSessionWithCandles(currentSession.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      updateCandles(() => {
        console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–≤–µ—á–µ–π: ${result.candles.length}`);
        return result.candles;
      });
      
      setCurrentSession(result.session);
      
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      addError('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', error instanceof Error ? error.message : 'Unknown error');
    }
  }, [currentSession, updateCandles, setCurrentSession, addError]);

  return {
    saveCandle,
    deleteCandle,
    updateCandle,
    syncCandleData // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  };
};
