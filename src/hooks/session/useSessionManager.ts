
import { useCallback } from 'react';
import { useTradingStore } from '@/store/TradingStore';
import { useSessionInitialization } from './useSessionInitialization';
import { useSessionOperations } from './useSessionOperations';

export const useSessionManager = () => {
  const { state, dispatch } = useTradingStore();

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–µ—Ä–µ–∑ TradingStore
  const setSessions = useCallback((sessions: any[]) => {
    dispatch({ type: 'SET_SESSIONS', payload: sessions });
  }, [dispatch]);

  const setCurrentSession = useCallback((session: any) => {
    dispatch({ type: 'SET_CURRENT_SESSION', payload: session });
  }, [dispatch]);

  const setIsLoading = useCallback((loading: boolean) => {
    dispatch({ type: 'SET_LOADING', payload: loading });
  }, [dispatch]);

  const updateCandles = useCallback((updater: (prev: any[]) => any[]) => {
    const newCandles = updater(state.candles);
    dispatch({ type: 'SET_CANDLES', payload: newCandles });
  }, [dispatch, state.candles]);

  const resetSessionState = useCallback(() => {
    dispatch({ type: 'SET_CURRENT_SESSION', payload: null });
    dispatch({ type: 'CLEAR_CANDLES' });
    dispatch({ type: 'CLEAR_PREDICTIONS' });
  }, [dispatch]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
  const { loadSessions } = useSessionInitialization(setSessions, setIsLoading);

  // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–µ—Å—Å–∏—è–º–∏
  const {
    createSession,
    loadSession,
    deleteSession
  } = useSessionOperations(
    setIsLoading,
    setSessions,
    setCurrentSession,
    updateCandles
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
  const refreshSessions = useCallback(async () => {
    await loadSessions();
  }, [loadSessions]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞
  const handleCreateSession = useCallback(async (sessionData: any) => {
    const session = await createSession(sessionData);
    await refreshSessions();
    return session;
  }, [createSession, refreshSessions]);

  const handleDeleteSession = useCallback(async (sessionId: string) => {
    await deleteSession(sessionId);
    await refreshSessions();
  }, [deleteSession, refreshSessions]);

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  const syncStateWithDB = useCallback(async () => {
    if (!state.currentSession) return;

    try {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ë–î...');
      setIsLoading(true);

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await loadSession(state.currentSession.id);
      
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      dispatch({ type: 'ADD_ERROR', payload: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö' });
    } finally {
      setIsLoading(false);
    }
  }, [state.currentSession, setIsLoading, loadSession, dispatch]);

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  const validateDataIntegrity = useCallback(() => {
    if (!state.currentSession) return null;

    const actualCandleCount = state.candles.length;
    const sessionIndex = state.currentSession.current_candle_index;
    const expectedMaxIndex = actualCandleCount > 0 
      ? Math.max(...state.candles.map((c: any) => c.candle_index))
      : 0;

    const isConsistent = sessionIndex >= expectedMaxIndex;

    return {
      isConsistent,
      actualCandleCount,
      sessionIndex,
      expectedMaxIndex,
      discrepancy: sessionIndex - expectedMaxIndex
    };
  }, [state.currentSession, state.candles]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ TradingStore
    sessions: state.sessions,
    currentSession: state.currentSession,
    candles: state.candles,
    isLoading: state.isLoading,
    sessionStats: state.sessionStats,
    nextCandleIndex: state.nextCandleIndex,
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏
    createSession: handleCreateSession,
    loadSession,
    deleteSession: handleDeleteSession,
    refreshSessions,
    resetSessionState,
    updateCandles,
    setCurrentSession,

    // –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    syncStateWithDB,
    validateDataIntegrity
  };
};
